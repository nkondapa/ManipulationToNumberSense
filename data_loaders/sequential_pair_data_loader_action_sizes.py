import torch
import os
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

'''
Load pairs from a dataset generated by actions, the pairs will be sequential.

Parameters:
root - root folder of the project
dataset_folder - folder to the datasets
split_name - train or test


Returns:
pairs of sequential images, the action used, the number of objects in the first image of the pair
'''


class SequentialPairDataLoader(torch.utils.data.Dataset):

    def __init__(self, root, dataset_folder, split_name, transform=None,
                 target_transform=None):

        # path to datasets, load data
        self.processed_folder = 'processed/' + dataset_folder.rstrip('/') + '/'
        self.split_name = split_name
        self.root = os.path.expanduser(root)
        self.data, self.labels, self.actions, self.counts, self.action_sizes = torch.load(
            os.path.join(self.root, self.processed_folder, self.split_name))

        # identifier for save files
        self.name = 'sequential_pair_data_loader/' + dataset_folder.rstrip('/').replace('/', '-')

        self.targets_dict = {-1: [1, 0, 0], 0: [0, 1, 0], 1: [0, 0, 1]}  # one-hot-encode the target
        self.transform = transform
        self.target_transform = target_transform

        # pair the images in the dataset
        self.paired_data_indices = []
        self.paired_labels = []
        for i in range(len(self.data) - 1):
            self.paired_data_indices.append([i, i + 1])
            self.paired_labels.append(self.targets_dict[self.actions[i].item()])

        self.labels = torch.tensor(self.paired_labels)
        del self.paired_labels

    def __getitem__(self, index):

        # get data, targets, counts at index
        target = self.labels[index]
        count = self.counts[index]
        imgs = [Image.open(self.data[self.paired_data_indices[index]][0]), Image.open(self.data[self.paired_data_indices[index]][1])]
        # imgs = self.data[self.paired_data_indices[index]]

        # convert images to desired format
        img_ar = []
        for i in range(len(imgs)):
            img = imgs[i]
            # if imgs[i].shape[0] == 3:
            #     img = Image.fromarray(np.copy(np.moveaxis(imgs[i].numpy() * 255, [0, 1, 2], [2, 0, 1]).astype('uint8')), 'RGB')
            # else:
            #     img = Image.fromarray(np.copy(imgs[i].numpy()))

            if self.transform is not None:
                img = self.transform(img)

            img_ar.append(img)

        if self.target_transform is not None:
            target = self.target_transform(target)

        return img_ar, target, count

    def __len__(self):
        return len(self.paired_data_indices)
