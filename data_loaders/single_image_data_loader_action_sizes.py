import torch
import os
import numpy as np
from PIL import Image


'''
Load one image from a dataset generated by just the counts, no actions.

Parameters:
root - root folder of the project
dataset_folder - folder to the datasets
split_name - train or test

Returns:
single images and the number of objects in the image
 
'''


class SingleImageLoader(torch.utils.data.Dataset):

    def __init__(self, root, dataset_folder, split_name, transform=None):

        # path to datasets, load data
        self.root = os.path.expanduser(root)
        self.processed_folder = 'processed/' + dataset_folder.rstrip('/') + '/'
        self.split_name = split_name
        self.data, self.labels, self.actions, self.counts, self.action_sizes = \
            torch.load(os.path.join(self.root, self.processed_folder, split_name))

        # identifier for save files
        self.name = 'sequential_data_loader/' + dataset_folder.rstrip('/').replace('/', '-')

        self.transform = transform

    def __getitem__(self, index):
        img_path, target = self.data[index], self.counts[index]
        img = Image.open(img_path)
        img_ar = []

        # images are BGR, 0-1, need to scale to 0-256 and make RGB for PIL
        # if img.shape[0] == 3:
        #     img = Image.fromarray(np.copy(np.moveaxis(img.numpy() * 255, [0, 1, 2], [2, 0, 1]).astype('uint8')), 'RGB')
        # else:
        #     img = Image.fromarray(np.copy(img.numpy()))

        if self.transform is not None:
            img = self.transform(img)
        img_ar.append(img)

        return img_ar, target

    def __len__(self):
        return len(self.data)

